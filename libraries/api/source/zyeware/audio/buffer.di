// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.audio.buffer;


import std.conv : to;
import zyeware;
import zyeware.pal;
import zyeware.pal.audio.types;

/// Contains an encoded audio segment, plus various information like
/// loop point etc.
@asset(Yes.cache) class AudioBuffer : NativeObject {

protected:

NativeHandle mNativeHandle;

public:

this(const(ubyte)[] encodedMemory, AudioProperties properties = AudioProperties.init) {
mNativeHandle = Pal.audio.createBuffer(encodedMemory, properties);
}

~this() {
Pal.audio.freeBuffer(mNativeHandle);
}

/// The point where this sound should loop, if played through an `AudioSource`.
LoopPoint loopPoint() const nothrow;

/// ditto
void loopPoint(LoopPoint value);

const(NativeHandle) handle() pure const nothrow;

/// Loads a sound from a given Vfs path.
/// Params:
/// path = The path inside the Vfs.
/// Returns: A newly created `Sound` instance.
/// Throws: `VfsException` if the given file can't be loaded.
static AudioBuffer load(string path);
}