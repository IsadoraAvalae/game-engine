// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.audio.source;


import zyeware;
import zyeware.pal;
import zyeware.pal.audio.types;

/// Represents an individual source that can play sounds. Only one sound
/// can play at a time.
class AudioSource : NativeObject {

protected:

NativeHandle mNativeHandle;

AudioBuffer mBuffer;

public:

this(in AudioBus bus)
in (bus, "Audio bus must be valid.") {
mNativeHandle = Pal.audio.createSource(bus.handle);
}

/// Starts playback, or resumes if the source has been paused previously.
void play();

/// Pauses playback. If playback wasn't started, nothing happens.
void pause();

/// Stops playback completely. If playback wasn't started, nothing happens.
void stop();

/// The `Sound` instance assigned to this source.
inout(AudioBuffer) buffer() inout;

/// ditto
void buffer(AudioBuffer value);

/// Determines whether the source is looping it's sound. The loop point is defined by
/// the assigned `Sound`.
bool looping() const nothrow;

/// ditto
void looping(bool value);

/// The volume of this source, ranging from 0 to 1.
float volume() const nothrow;

/// ditto
void volume(float value);

/// The pitch of this source, ranging from 0 to 1.
/// This controls pitch as well as speed.
float pitch() const nothrow;

/// ditto
void pitch(float value);

/// The state this source is currently in.
SourceState state() const nothrow;

const(NativeHandle) handle() pure const nothrow;
}