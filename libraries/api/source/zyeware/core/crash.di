// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.core.crash;


import std.string : format;
import std.conv : dtext;
import zyeware;

/// A `CrashHandler` is responsible for gracefully handling an unhandled `Throwable`.
/// The handler must expect the engine to close immediately after handling.
interface CrashHandler {

/// Handles the specified throwable.
/// 
/// Params:
/// t = The throwable to handle.
void show(Throwable t);
}

/// The default crash handler, used in absence of any other. Only displays the error
/// to the console.
class DefaultCrashHandler : CrashHandler {

public:

/// Handles the specified throwable.
/// 
/// Params:
/// t = The throwable to handle.
void show(Throwable t);
}version (linux)

/// The default crash handler for Linux operating systems.
class LinuxDefaultCrashHandler : DefaultCrashHandler {
import std.process : execute, executeShell;

private:

enum popupTitle = "Fatal Error";;

enum popupDescription = "Please notify the developer about this issue.\nAdditionally, if this is a bug" ~ " in the engine, please leave a bug report over at https://github.com/zyebytevt/zyeware.";;

enum popupMoreDetails = "For more details, please look into the logs.";;

protected:

bool commandExists(string command);

void showKDialog(Throwable t);

void showZenity(in Throwable t);

void showXMessage(in Throwable t);

void showGXMessage(in Throwable t);

public:

override void show(Throwable t);
}version (Windows)

/// The default crash handler for Windows operating systems.
class WindowsDefaultCrashHandler : DefaultCrashHandler {
import core.sys.windows.windows;
import std.utf : toUTFz;

protected:

void showMessageBox(string message, string title);

public:

override void show(Throwable t);
}