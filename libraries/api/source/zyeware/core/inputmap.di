// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.core.inputmap;


import std.typecons : scoped, Rebindable, rebindable, Tuple;
import std.sumtype : SumType, match;
import std.algorithm : remove;
import zyeware;

alias InputKey = Tuple!(KeyCode, "key", bool, "isPressed");
alias InputMouse = Tuple!(MouseCode, "button", bool, "isPressed");
alias InputGamepadButton = Tuple!(GamepadIndex, "index", GamepadButton, "button", bool, "isPressed");
alias InputGamepadAxis = Tuple!(GamepadIndex, "index", GamepadAxis, "axis", float, "value");

struct Input {

private:
alias Value = SumType!(InputKey, InputMouse, InputGamepadButton, InputGamepadAxis);

public:

Value value;alias value this;

static Input key(KeyCode key, bool isPressed) pure nothrow;

static Input mouse(MouseCode button, bool isPressed) pure nothrow;

static Input gamepadButton(GamepadIndex index, GamepadButton button, bool isPressed) pure nothrow;

static Input gamepadAxis(GamepadIndex index, GamepadAxis axis, float value) pure nothrow;
}

final class Action {

protected:

float mDeadzone;

Input[] mTemplates;

bool mOldIsPressed, mCurrentIsPressed;

float mCurrentStrength;

this(float deadzone) pure nothrow {
mDeadzone = deadzone;
mTemplates = [];
}

bool processInput(in Input input) pure nothrow;

public:

/// Adds an `InputEvent` to the action as a template.
/// 
/// Params:
/// input = The input template to add.
/// 
/// Returns: Itself for chaining.
Action addInput(in Input input) pure nothrow;

/// Removes an `InputEvent` from the action.
/// 
/// Params:
/// input = The input template to remove.
/// 
/// Returns: Itself for chaining.
Action removeInput(in Input input);
}

struct InputMap {

@disable this();

@disable this(this);

private static:

Action[string] sActions;

void processInput(in Input input) nothrow;

void onKeyboardKeyPressed(KeyCode key) nothrow;

void onKeyboardKeyReleased(KeyCode key) nothrow;

void onMouseButtonPressed(MouseCode button, size_t clickCount) nothrow;

void onMouseButtonReleased(MouseCode button) nothrow;

void onGamepadButtonPressed(GamepadIndex index, GamepadButton button) nothrow;

void onGamepadButtonReleased(GamepadIndex index, GamepadButton button) nothrow;

void onGamepadAxisMoved(GamepadIndex index, GamepadAxis axis, float value) nothrow;

package(zyeware.core) static:

void initialize() @safe;

void cleanup() @safe nothrow;

public static:

/// Adds an action.
/// 
/// Params:
/// name = The name of the new action.
/// deadzone = The amount of input force necessary for this action to fire.
/// 
/// Returns: The newly created `Action`.
/// See_Also: Action
Action addAction(string name, float deadzone = 0.5f) nothrow;

/// Removes the specified action.
/// 
/// Params:
/// name = The name of the action to remove.
void removeAction(string name) nothrow;

/// Returns the specified action, or null if it doesn't exist.
/// 
/// Params:
/// name = The name of the action to return.
Action getAction(string name) nothrow;

/// Returns if the specified action is currently in it's "pressed" state.
/// 
/// Params:
/// name = The name of the action.
bool isActionPressed(string name) nothrow;

/// Returns if the specified action has changed it's state to "pressed" in this frame.
/// 
/// Params:
/// name = The name of the action.
bool isActionJustPressed(string name) nothrow;

/// Returns if the specified action has changed it's state to "released" in this frame.
/// 
/// Params:
/// name = The name of the action.
bool isActionJustReleased(string name) nothrow;

/// Returns the current input strength of the specified action, or 0 if it isn't pressed.
/// 
/// Params:
/// name = The name of the action.
float getActionStrength(string name) nothrow;
}