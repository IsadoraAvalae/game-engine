// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.core.math.matrix;


import inmath.math;
import inmath.linalg;
public import inmath.linalg : quat, mat2, mat3, mat4;
import zyeware;

/// Convert a 2D position from world to local space.
/// 
/// Params:
/// worldPoint = The 2D position in world space.
/// 
/// Returns: The position in local space.
vec2 inverseTransformPoint(in mat4 transform, in vec2 worldPoint) pure nothrow;

/// Convert a 2D position from local to world space.
/// 
/// Params:
/// localPoint = The 2D position in local space.
/// 
/// Returns: The position in world space.
vec2 transformPoint(in mat4 transform, in vec2 localPoint) pure nothrow;

/// Convert a 3D position from world to local space.
/// 
/// Params:
/// worldPoint = The 3D position in world space.
/// 
/// Returns: The position in local space.
vec3 inverseTransformPoint(in mat4 transform, in vec3 worldPoint) pure nothrow;

/// Convert a 3D position from local to world space.
/// 
/// Params:
/// localPoint = The 3D position in local space.
/// 
/// Returns: The position in world space.
vec3 transformPoint(in mat4 transform, in vec3 localPoint) pure nothrow;

@("Matrix vector transforms") unittest {
import unit_threaded.assertions; {

mat4 transform;

vec2 localPoint;

vec2 worldPoint;
worldPoint.x.should == 15.0;
worldPoint.y.should == 25.0;

vec2 inversePoint;
inversePoint.x.should == localPoint.x;
inversePoint.y.should == localPoint.y;
} {

mat4 transform;

vec3 localPoint;

vec3 worldPoint;
worldPoint.x.should == 15.0;
worldPoint.y.should == 25.0;
worldPoint.z.should == 35.0;

vec3 inversePoint;
inversePoint.x.should == localPoint.x;
inversePoint.y.should == localPoint.y;
inversePoint.z.should == localPoint.z;
}
}