// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.physics.shapes.polygon2d;


import std.typecons : Rebindable;
import std.range;
import zyeware;

class PolygonShape2d : Shape2d {

protected:

Rebindable!(const vec2[]) mVertices;

package(zyeware.physics.shapes):

Collision2d isCollidingWithPolygon(in mat4 thisTransform, in PolygonShape2d other, in mat4 otherTransform) pure const nothrow;

Collision2d isCollidingWithCircle(in mat4 transform, in CircleShape2d other, in mat4 otherTransform) pure const nothrow;

public:

this(in vec2[] vertices) pure
in (vertices && vertices.length >= 3, "Polygon must have at least 3 vertices.") {
mVertices = vertices;
}

Collision2d isCollidingWith(in mat4 thisTransform, in Shape2d other, in mat4 otherTransform) pure const nothrow;

Collision2d isRaycastColliding(in mat4 thisTransform, in vec2 rayOrigin, in vec2 rayDirection, float maxDistance) pure const nothrow;

Projection2d project(in mat4 thisTransform, in vec2 axis) pure const nothrow;

AABB2 getAABB(in mat4 thisTransform) pure const nothrow;
}

/// Generates normals of a 2D shape on the fly.
/// Thanks to https://github.com/WebFreak001/sat-inmath/blob/master/source/sat.d !
struct Normals2d {

private:

vec2[] mVertices;

mat4 mTransform;

vec2 mFirst, mLast;

bool mDidLast;

public:

this(in vec2[] vertices, in mat4 transform) pure nothrow
in (vertices, "Vertices cannot be null.") {
mVertices = vertices.dup;
mTransform = transform;
}

size_t length() pure const nothrow;

void popFront() pure nothrow;

bool empty() pure const nothrow;

vec2 front() pure const nothrow;
}