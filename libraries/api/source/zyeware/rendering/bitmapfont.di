// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.rendering.bitmapfont;


import std.traits : isSomeString;
import std.array : array;
import std.algorithm : map;
import std.string : format;
import zyeware.zyfont;
import zyeware;

struct BitmapFontProperties {

string fontName;

short fontSize;

bool isBold;

bool isItalic;

short lineHeight;

ubyte[4] padding;

ubyte[2] spacing;

Image[] pages;

BitmapFont.Glyph[dchar] characters;

short[ulong] kernings;

TextureProperties pageTextureProperties;
}

@asset(Yes.cache) class BitmapFont {

protected:

const(BitmapFontProperties) mProperties;

Texture2d[] mPageTextures;

public:

/// Information about a single character.
struct Glyph {

dchar id;

ubyte pageIndex;

vec2 uv1, uv2;

vec2i size, offset, advance;
}

/// How a text should be aligned.
enum Alignment : uint 
 {
top = 1,
middle = 1 << 1,
bottom = 1 << 2,
left = 1 << 3,
center = 1 << 4,
right = 1 << 5
}

this(in BitmapFontProperties properties) {
mProperties = properties;
debug_("Creating bitmap font '%s, %d'...", mProperties.fontName, mProperties.fontSize);

for (

size_t i; i < mProperties.pages.length; ++i)
mPageTextures ~= new Texture2d(mProperties.pages[i], mProperties.pageTextureProperties);
}

/// Gets the width of the given string in this font, in pixels.
/// 
/// Params:
/// text = The text to get the width of.
/// 
/// Returns: The width of the text in this font, in pixels.
int getTextWidth(T)(in T text) const pure nothrow 
if(isSomeString!T)
in (text, "Text cannot be null.") {

int maxLength, lineLength;

for (

size_t i; i < text.length; ++i) {

immutable dchar c;
if (c == '\n') {
lineLength = 0;
continue;
}

immutable short kerning;

immutable Glyph info;
if (info != Glyph.init)
lineLength += info.advance.x + kerning;
if (lineLength > maxLength)
maxLength = lineLength;
}
return maxLength;
}

/// Gets the height of the given string in this font, in pixels.
/// 
/// Params:
/// text = The text to get the height of.
/// 
/// Returns: The height of the text in this font, in pixels.
int getTextHeight(T)(in T text) const pure nothrow 
if(isSomeString!T)
in (text, "Text cannot be null.") {

int lines;

foreach (c; text) {
if (c == '\n')
++lines;
}
return mProperties.lineHeight * lines;
}

const(Texture2d) getPageTexture(size_t index) const nothrow;

Glyph getGlyph(dchar c) const pure nothrow;

short getKerning(dchar first, dchar second) const pure nothrow;

short lineHeight() const pure nothrow;

static BitmapFont load(string path);
}