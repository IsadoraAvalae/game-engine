// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.rendering.framebuffer;


import std.exception : enforce;
import zyeware;
import zyeware.pal;

struct FramebufferProperties {

/// Determines how the framebuffer is used later on.
enum UsageType 
 {
swapChainTarget, /// The framebuffer is used as a swapchain target.
/// This means that the framebuffer will be presented to the screen.
/// This is the default usage type.

texture /// The framebuffer is used as a texture.
/// This means that the framebuffer will be used as a texture in a shader.
/// This is useful for post-processing effects.

}

vec2i size;

UsageType usageType;
}

class Framebuffer : NativeObject {

protected:

NativeHandle mNativeHandle;

FramebufferProperties mProperties;

public:

this(in FramebufferProperties properties) {
mProperties = properties;
mNativeHandle = Pal.graphics.api.createFramebuffer(mProperties);
}

~this() {
Pal.graphics.api.freeFramebuffer(mNativeHandle);
}

void recreate(in FramebufferProperties properties);

Texture2d getTexture2D();

const(NativeHandle) handle() pure const nothrow;

const(FramebufferProperties) properties() pure const nothrow;
}