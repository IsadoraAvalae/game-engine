// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.rendering.material;


import std.sumtype : SumType, match;
import std.string : format, startsWith;
import std.exception : enforce;
import std.typecons : Rebindable;
import std.conv : to;
import std.string : split, format;
import std.algorithm : map, filter, sort, uniq;
import std.array : array;
import inmath.linalg;
import zyeware;

@asset(Yes.cache) class Material {

protected:

union  {

Shader mShader;

Material mParent;
}

bool mIsRoot;

Rebindable!(const Texture)[] mTextureSlots;

Parameter[string] mParameters;

public:
alias Parameter = SumType!(void[], int, float, vec2, vec3, vec4);

this(Shader shader, size_t textureSlots = 1)
in (shader, "Shader cannot be null.") {
mShader = shader;
mIsRoot = true;
mTextureSlots.length = textureSlots;
}

this(Material parent)
in (parent, "Parent material cannot be null.") {
mParent = parent;
mIsRoot = false;
mTextureSlots.length = parent.mTextureSlots.length;
}

void setParameter(string name, Parameter value);

void setParameter(T)(string name, T value)
in (name, "Parameter name cannot be null.") {
setParameter(Parameter(value));
}

ref inout(Parameter) getParameter(string name) inout;

bool removeParameter(string name) nothrow;

void setTexture(size_t idx, in Texture texture);

const(Texture) getTexture(size_t idx) const;

void removeTexture(size_t idx);

string[] parameterList() const nothrow;

inout(Material) parent() inout nothrow;

inout(Material) root() inout nothrow;

inout(Shader) shader() inout nothrow;

static Material load(string path);
}