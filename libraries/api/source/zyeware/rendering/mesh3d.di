// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.rendering.mesh3d;


import std.string : format;
import std.path : extension;
import std.conv : to;
import std.typecons : Rebindable;
import inmath.linalg;
import zyeware;
import zyeware.pal;

interface Mesh {}

@asset(Yes.cache) class Mesh3d : Mesh, NativeObject {

protected:

NativeHandle mNativeHandle;

Rebindable!(const(Material)) mMaterial;

pragma(inline, true) static vec3 calculateSurfaceNormal(vec3 p1, vec3 p2, vec3 p3) nothrow pure;

static void calculateNormals(ref Vertex3D[] vertices, in uint[] indices) nothrow pure;

public:

this(in Vertex3D[] vertices, in uint[] indices, in Material material)
in (vertices, "Vertices cannot be null.")
in (indices, "Indices cannot be null.") {
mNativeHandle = Pal.graphics.api.createMesh(vertices, indices);
mMaterial = material;
}

~this() {
Pal.graphics.api.freeMesh(mNativeHandle);
}

const(void)* handle() const nothrow pure;

static Mesh3d load(string path);
}

private:

Mesh3d loadFromOBJFile(string path);