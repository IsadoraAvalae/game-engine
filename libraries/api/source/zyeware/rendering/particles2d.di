// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.rendering.particles2d;


import std.container.slist;
import std.container.dlist;
import std.datetime : Duration, hnsecs;
import std.typecons : Tuple;
import std.algorithm : canFind, remove;
import std.math : sin, cos, PI;
import std.exception : enforce;
import std.range : walkLength;
import std.string : format;
import zyeware;

alias ParticleRegistrationID = size_t;

class Particles2D {

protected:

ParticleContainer*[ParticleRegistrationID] mParticles;

ParticleRegistrationID mNextTypeId;

public:

ParticleRegistrationID registerType(in ParticleProperties2D type, size_t maxParticles);

void unregisterType(ParticleRegistrationID id) nothrow;

void emit(ParticleRegistrationID id, vec2 position, size_t amount);

void tick();

void draw(in FrameTime nextFrameTime);

size_t count() pure nothrow;
}

struct ParticleProperties2D {

public:

Texture2d texture;

auto size = Range!float(1, 1);;

Range!Duration lifeTime;

Gradient modulate;

vec2 gravity;

auto spriteAngle = Range!float(0, 0);;

auto direction = Range!float(0, PI * 2);;

auto speed = Range!float(0, 1);;

ParticleRegistrationID typeOnDeath;
}

private struct ParticleContainer {

ParticleProperties2D type;

vec2[] positions;

float[] sizes;

float[] rotations;

vec2[] velocities;

Duration[] lifeTimes;

Duration[] startLifeTimes;

size_t activeParticlesCount;

this(in ParticleProperties2D type, size_t count) pure nothrow {
this.type = cast(ParticleProperties2D)type;
positions = new vec2[count];
sizes = new float[count];
rotations = new float[count];
velocities = new vec2[count];
lifeTimes = new Duration[count];
startLifeTimes = new Duration[count];
}

~this() {
positions.dispose();
sizes.dispose();
rotations.dispose();
velocities.dispose();
lifeTimes.dispose();
startLifeTimes.dispose();
}

void add(in vec2 position);

void remove(size_t idx);
}