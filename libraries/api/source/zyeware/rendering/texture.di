// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.rendering.texture;


import std.conv : to;
import std.string : format;
import std.algorithm : countUntil;
import zyeware;
import zyeware.pal;

struct TextureProperties {

enum Filter 
 {
nearest,
linear,
bilinear,
trilinear
}

enum WrapMode 
 {
repeat,
mirroredRepeat,
clampToEdge
}

Filter minFilter, magFilter;

WrapMode wrapS, wrapT;

bool generateMipmaps;
}

interface Texture : NativeObject {

const(TextureProperties) properties() pure const nothrow;
}

@asset(Yes.cache) class Texture2d : Texture {

protected:

NativeHandle mNativeHandle;

TextureProperties mProperties;

vec2i mSize;

package(zyeware):

/// Careful: This will take ownership of the given handle.
this(NativeHandle handle, in vec2i size, in TextureProperties properties = TextureProperties.init) nothrow {
mProperties = properties;
mSize = size;
mNativeHandle = handle;
}

public:

this(in Image image, in TextureProperties properties = TextureProperties.init) {
mProperties = properties;
mSize = image.size;
mNativeHandle = Pal.graphics.api.createTexture2D(image, mProperties);
}

~this() {
Pal.graphics.api.freeTexture2D(mNativeHandle);
}

const(TextureProperties) properties() pure const nothrow;

const(NativeHandle) handle() pure const nothrow;

const(vec2i) size() pure const nothrow;

static Texture2d load(string path);
}

@asset(Yes.cache) class TextureCubeMap : Texture {

protected:

NativeHandle mNativeHandle;

TextureProperties mProperties;

public:

this(in Image[6] images, in TextureProperties properties = TextureProperties.init) {
mProperties = properties;
mNativeHandle = Pal.graphics.api.createTextureCubeMap(images, properties);
}

~this() {
Pal.graphics.api.freeTextureCubeMap(mNativeHandle);
}

const(TextureProperties) properties() pure const nothrow;

const(NativeHandle) handle() pure const nothrow;

static TextureCubeMap load(string path);
}

private void parseTextureProperties(string path, out TextureProperties properties);