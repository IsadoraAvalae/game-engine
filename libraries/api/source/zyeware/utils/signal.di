// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.utils.signal;


import std.algorithm : remove;
import zyeware;

struct Signal(T1...) {

private:
alias delegate_t = void delegate(T1) nothrow;
alias function_t = void function(T1) nothrow;

struct Slot {

union  {

delegate_t dg;

function_t fn;
}

bool isDelegate;

bool isOneShot;
}

Slot[] mSlots;

public:
alias slotidx_t = size_t;

slotidx_t connect(delegate_t dg, Flag!"oneShot" oneShot = No.oneShot) @trusted pure nothrow;

slotidx_t connect(function_t fn, Flag!"oneShot" oneShot = No.oneShot) @trusted pure nothrow;

void disconnect(slotidx_t idx) @safe pure nothrow;

void disconnect(delegate_t dg) @trusted pure nothrow;

void disconnect(function_t fn) @trusted pure nothrow;

void disconnectAll() @safe pure nothrow;

void emit(T1 args) nothrow;pragma(inline, true)  {

void opCall(T1 args);

slotidx_t opOpAssign(string op)(delegate_t dg) 
if(op == "+")=> connect(dg);

slotidx_t opOpAssign(string op)(function_t fn) 
if(op == "+")=> connect(fn);

void opOpAssign(string op)(delegate_t dg) 
if(op == "-")=> disconnect(dg);

void opOpAssign(string op)(function_t fn) 
if(op == "-")=> disconnect(fn);
}
}