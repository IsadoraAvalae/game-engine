// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.vfs.dir;


import std.exception : enforce;
import std.string : format;
import zyeware;

/// Represents a virtual directory in the Vfs. Where this directory is
/// physically located depends on the implementation.
abstract class VfsDirectory {

protected:

string mPath;

this(string path) pure nothrow {
mPath = path;
}

public:

/// Retrieve a subdirectory by it's name.
/// Returns: The requested VfsDirectory.
/// Throws: VfsException for invalid paths or if the directory cannot be found.
abstract VfsDirectory getDirectory(string name);

/// Retrieve a file inside this directory by it's name.
/// Returns: The requested VfsFile.
/// Throws: VfsException for invalid paths or if the file cannot be found.
abstract VfsFile getFile(string name);

/// Returns `true` if the subdirectory with the given name exists, `false` otherwise.
abstract bool hasDirectory(string name) const nothrow;

/// Returns `true` if the file with the given name exists, `false` otherwise.
abstract bool hasFile(string name) const nothrow;

/// Returns the names of all files inside this directory.
abstract immutable(string[]) files() const;

/// Returns the names of all subdirectories inside this directory.
abstract immutable(string[]) directories() const;

string path() pure const nothrow;
}

package(zyeware.vfs):

bool isWriteMode(VfsFile.Mode mode) pure nothrow;

class VfsCombinedDirectory : VfsDirectory {

protected:

VfsDirectory[] mDirectories;

package:

this(string path, VfsDirectory[] directories) pure nothrow {
super(path);
mDirectories = directories;
}

void addDirectory(VfsDirectory directory) pure nothrow;

public:

override VfsDirectory getDirectory(string name);

override VfsFile getFile(string name);

override bool hasDirectory(string name) const nothrow;

override bool hasFile(string name) const nothrow;

override immutable(string[]) files() const;

override immutable(string[]) directories() const;
}