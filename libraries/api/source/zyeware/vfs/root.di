// This file was generated by ZyeWare APIgen. Do not edit!
module zyeware.vfs.root;


static import std.path;
import core.stdc.stdlib : getenv;
import std.algorithm : findSplit, canFind;
import std.exception : enforce;
import std.typecons : Tuple;
import std.range : empty;
import std.string : fromStringz, format;
import std.file : mkdirRecurse, thisExePath, exists;
import zyeware;
import zyeware.vfs.disk.loader : VfsDiskLoader;
import zyeware.vfs.disk.dir : VfsDiskDirectory;
import zyeware.vfs.zip.loader : VfsZipLoader;
import zyeware.vfs.zip.dir : VfsZipDirectory;
import zyeware.vfs.dir : VfsCombinedDirectory;

private ubyte[16] md5FromHex(string hexString);

struct Vfs {

private static:

enum userDirVfsPath = "user://";;

enum userDirPortableName = "ZyeWareData/";;

VfsDirectory[string] sSchemes;

VfsLoader[] sLoaders;

bool sPortableMode;

pragma(inline, true) VfsDirectory getScheme(string scheme);

pragma(inline, true) auto splitPath(string path);

VfsDirectory loadPackage(string path, string scheme);

VfsDirectory createUserDir();

package(zyeware) static:

void initialize();

void cleanup() nothrow;

public static:

/// Registers a new VfsLoader to be used when loading packages.
/// 
/// Params:
/// loader: The loader to register.
void registerLoader(VfsLoader loader) nothrow;

/// Adds a package to the Vfs.
/// 
/// Params:
/// path: The real path to the package.
VfsDirectory addPackage(string path);

/// Opens the file with the given path and mode.
/// 
/// Params:
/// name = The path to the file.
/// mode = The mode to open the file in.
VfsFile open(string name, VfsFile.Mode mode = VfsFile.Mode.read);

/// Opens a file from memory.
/// 
/// Params:
/// name = The name of the file. Can be arbitrary.
/// data = The data of the file.
VfsFile openFromMemory(string name, in ubyte[] data);

VfsFile getFile(string name);

VfsDirectory getDirectory(string name);

bool hasFile(string name);

bool hasDirectory(string name);

bool portableMode() nothrow;
}